# ==================== Custom Scalars ====================
scalar JSON

# ==================== Root Queries ====================
type Query {
    # Authentication Query
    secureData: String!

    # Group Queries
    group(id: ID!): Group
    groups: [Group!]!

    # User-Group Queries
    userGroups(userId: ID!): [Group!]!
    groupMembers(groupId: ID!): [UserGroup!]!

    # Post Queries
    post(id: ID!): Post
    posts(groupId: ID, authorId: ID, sort: PostSortType, limit: Int, offset: Int): [Post!]!

    # Comment Queries
    comment(id: ID!): Comment
    comments(postId: ID!, sort: CommentSortType, limit: Int, offset: Int): [Comment!]!
}

# ==================== Root Mutations ====================
type Mutation {
    # Authentication Mutations
    register(input: RegisterInput!): AuthPayload!
    login(input: LoginInput!): AuthPayload!
    refreshToken(refreshToken: String!): RefreshPayload!
    logout(refreshToken: String!): LogoutResponse!

    # Group Mutations
    createGroup(input: CreateGroupInput!): Group!
    updateGroupConfig(input: UpdateGroupConfigInput!): Group!

    # User-Group Mutations
    joinGroup(groupId: ID!): UserGroup!
    leaveGroup(groupId: ID!): Boolean!
    updateUserGroupRole(input: UpdateUserGroupRoleInput!): UserGroup!

    # Post Mutations
    createPost(input: CreatePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    deletePost(postId: ID!): Boolean!
    votePost(input: VotePostInput!): Boolean!

    # Comment Mutations
    createComment(input: CreateCommentInput!): Comment!
    updateComment(input: UpdateCommentInput!): Comment!
    deleteComment(commentId: ID!): Boolean!
    voteComment(input: VoteCommentInput!): Boolean!
}

# ==================== Post Schema ====================
type Post {
    id: ID!
    author: User!
    group: Group
    title: String!
    content: String
    mediaUrls: [String!]
    linkUrl: String
    visibility: PostVisibility!
    type: PostType!
    votes: Int!
    userVote: VoteType
    commentCount: Int!
    comments(sort: CommentSortType, limit: Int, offset: Int): [Comment!]!
    isEdited: Boolean!
    isPinned: Boolean!
    isLocked: Boolean!
    createdAt: String!
    updatedAt: String!
}

enum PostType {
    TEXT
    IMAGE
    VIDEO
    LINK
    POLL
}

enum PostVisibility {
    PUBLIC
    PRIVATE
    GROUP_ONLY
}

enum PostSortType {
    HOT
    NEW
    TOP
}

# ==================== Vote Schema ====================
enum VoteType {
    UPVOTE
    DOWNVOTE
}

type ContentVote {
    id: ID!
    user: User!
    post: Post
    comment: Comment
    type: VoteType!
    createdAt: String!
}

# ==================== Comment Schema ====================
type Comment {
    id: ID!
    post: Post!
    parentComment: Comment
    author: User!
    content: String!
    votes: Int!
    userVote: VoteType
    replyCount: Int!
    replies(sort: CommentSortType, limit: Int, offset: Int): [Comment!]!
    isEdited: Boolean!
    createdAt: String!
    updatedAt: String!
}

enum CommentSortType {
    TOP
    NEW
    OLD
}

# ==================== Post Inputs ====================
input CreatePostInput {
    groupId: ID
    title: String!
    content: String
    mediaUrls: [String!]
    linkUrl: String
    visibility: PostVisibility!
    type: PostType!
}

input UpdatePostInput {
    postId: ID!
    title: String
    content: String
    mediaUrls: [String!]
    linkUrl: String
    visibility: PostVisibility
    isPinned: Boolean
    isLocked: Boolean
}

input VotePostInput {
    postId: ID!
    type: VoteType!
}

# ==================== Comment Inputs ====================
input CreateCommentInput {
    postId: ID!
    parentCommentId: ID
    content: String!
}

input UpdateCommentInput {
    commentId: ID!
    content: String!
}

input VoteCommentInput {
    commentId: ID!
    type: VoteType!
}

# ==================== Authentication Inputs ====================
input RegisterInput {
    username: String!
    password: String!
    email: String!
}

input LoginInput {
    username: String!
    password: String!
}

# ==================== Group Inputs ====================
input CreateGroupInput {
    name: String!
    displayName: String!
    description: String
    config: JSON
}

input UpdateGroupConfigInput {
    groupId: ID!
    config: JSON
}

# ==================== User-Group Inputs ====================
input UpdateUserGroupRoleInput {
    groupId: ID!
    userId: ID!
    role: GroupRole!
}

# ==================== Authentication Types ====================
type AuthPayload {
    accessToken: String!
    refreshToken: String!
}

type RefreshPayload {
    accessToken: String!
}

type LogoutResponse {
    message: String!
}

# ==================== Group Types ====================
type Group {
    id: ID!
    name: String!
    displayName: String!
    description: String
    config: JSON
    createdAt: String!
    updatedAt: String!
    members: [UserGroup!]!
}

# ==================== User-Group Types ====================
type UserGroup {
    user: User!
    group: Group!
    role: GroupRole!
    createdAt: String!
    updatedAt: String!
}

enum GroupRole {
    OWNER
    ADMIN
    MODERATOR
    MEMBER
}

# ==================== User Type ====================
type User {
    id: ID!
    username: String!
    email: String!
}